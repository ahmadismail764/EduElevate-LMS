{
    "info": {
        "name": "EduElevate LMS - Course Management Tests",
        "description": "Comprehensive test collection for Course Management System APIs including authentication, CRUD operations, enrollment system, and role-based authorization",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:8080",
            "type": "string"
        },
        {
            "key": "adminToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "instructorToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "studentToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "createdCourseId",
            "value": "",
            "type": "string"
        },
        {
            "key": "instructorId",
            "value": "",
            "type": "string"
        },
        {
            "key": "studentId",
            "value": "",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "1. Authentication Setup",
            "item": [
                {
                    "name": "1.1 Register Admin User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Admin registration successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('adminToken', response.token);",
                                    "    console.log('Admin token set:', response.token);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"admin_course_test\",\n    \"email\": \"admin.course@test.com\",\n    \"password\": \"AdminPass123!\",\n    \"firstName\": \"Course\",\n    \"lastName\": \"Admin\",\n    \"userType\": \"admin\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "1.2 Register Instructor User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Instructor registration successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('instructorToken', response.token);",
                                    "    pm.collectionVariables.set('instructorId', response.userId);",
                                    "    console.log('Instructor token set:', response.token);",
                                    "    console.log('Instructor ID set:', response.userId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"instructor_course_test\",\n    \"email\": \"instructor.course@test.com\",\n    \"password\": \"InstructorPass123!\",\n    \"firstName\": \"Course\",\n    \"lastName\": \"Instructor\",\n    \"userType\": \"instructor\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "1.3 Register Student User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Student registration successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('studentToken', response.token);",
                                    "    pm.collectionVariables.set('studentId', response.userId);",
                                    "    console.log('Student token set:', response.token);",
                                    "    console.log('Student ID set:', response.userId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"student_course_test\",\n    \"email\": \"student.course@test.com\",\n    \"password\": \"StudentPass123!\",\n    \"firstName\": \"Course\",\n    \"lastName\": \"Student\",\n    \"userType\": \"student\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "register"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "2. Course CRUD Operations",
            "item": [
                {
                    "name": "2.1 Create Course - Java Programming",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Java course creation successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test('Response contains course data', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.have.property('courseId');",
                                    "    pm.expect(response).to.have.property('title');",
                                    "    pm.expect(response.title).to.eql('Java Programming Fundamentals');",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('createdCourseId', response.courseId);",
                                    "    pm.collectionVariables.set('javaCourseId', response.courseId);",
                                    "    console.log('Java Course ID set:', response.courseId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Java Programming Fundamentals\",\n    \"description\": \"Comprehensive course covering Java programming from basics to advanced topics including OOP, data structures, and best practices\",\n    \"durationWeeks\": 12,\n    \"maxStudents\": 30,\n    \"instructorId\": {{instructorId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "2.2 Create Course - Python Data Science",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Python course creation successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('pythonCourseId', response.courseId);",
                                    "    console.log('Python Course ID set:', response.courseId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Python for Data Science\",\n    \"description\": \"Learn Python programming with focus on data analysis, visualization, and machine learning using pandas, matplotlib, and scikit-learn\",\n    \"durationWeeks\": 16,\n    \"maxStudents\": 25,\n    \"instructorId\": {{instructorId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "2.3 Create Course - Web Development",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Web dev course creation successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.collectionVariables.set('webCourseId', response.courseId);",
                                    "    console.log('Web Development Course ID set:', response.courseId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Full-Stack Web Development\",\n    \"description\": \"Master modern web development with HTML5, CSS3, JavaScript, React, Node.js, and database integration\",\n    \"durationWeeks\": 20,\n    \"maxStudents\": 20,\n    \"instructorId\": {{instructorId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "2.4 Get Course by ID",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get course successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Course details are correct', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.have.property('courseId');",
                                    "    pm.expect(response).to.have.property('title');",
                                    "    pm.expect(response.title).to.eql('Java Programming Fundamentals');",
                                    "    pm.expect(response.durationWeeks).to.eql(12);",
                                    "    pm.expect(response.maxStudents).to.eql(30);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/{{createdCourseId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "{{createdCourseId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "2.5 Get All Courses (List Format)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get all courses successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response is an array', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.be.an('array');",
                                    "    pm.expect(response.length).to.be.at.least(1);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses?paginated=false",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ],
                            "query": [
                                {
                                    "key": "paginated",
                                    "value": "false"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "2.6 Get All Courses (Paginated Format)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get paginated courses successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response is paginated format', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.have.property('content');",
                                    "    pm.expect(response).to.have.property('totalElements');",
                                    "    pm.expect(response).to.have.property('totalPages');",
                                    "    pm.expect(response.content).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses?paginated=true&page=0&size=10",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ],
                            "query": [
                                {
                                    "key": "paginated",
                                    "value": "true"
                                },
                                {
                                    "key": "page",
                                    "value": "0"
                                },
                                {
                                    "key": "size",
                                    "value": "10"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "2.7 Update Course (as Instructor)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Course update successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Course details updated correctly', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.title).to.eql('Advanced Java Programming');",
                                    "    pm.expect(response.durationWeeks).to.eql(16);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Advanced Java Programming\",\n    \"description\": \"Advanced Java programming concepts including Spring Framework and microservices\",\n    \"durationWeeks\": 16,\n    \"maxStudents\": 25\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/{{createdCourseId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "{{createdCourseId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "3. Course Search and Filtering",
            "item": [
                {
                    "name": "3.1 Search Courses by Title",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Search courses successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Search results contain matching courses', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.be.an('array');",
                                    "    if (response.length > 0) {",
                                    "        pm.expect(response[0].title).to.include('Java');",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/search?title=Java",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "search"
                            ],
                            "query": [
                                {
                                    "key": "title",
                                    "value": "Java"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "3.2 Get Courses by Instructor",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get instructor courses successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Courses belong to instructor', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.be.an('array');",
                                    "    if (response.length > 0) {",
                                    "        const instructorId = pm.collectionVariables.get('instructorId');",
                                    "        pm.expect(response[0].instructorId.toString()).to.eql(instructorId);",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/search?instructorId={{instructorId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "search"
                            ],
                            "query": [
                                {
                                    "key": "instructorId",
                                    "value": "{{instructorId}}"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "3.3 Get Courses with Available Spots",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get available courses successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Courses have available spots', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/search?availableOnly=true",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "search"
                            ],
                            "query": [
                                {
                                    "key": "availableOnly",
                                    "value": "true"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "4. Course Enrollment System",
            "item": [
                {
                    "name": "4.1 Enroll Student in Course",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Student enrollment successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test('Enrollment details are correct', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.have.property('enrollmentId');",
                                    "    pm.expect(response).to.have.property('status');",
                                    "    pm.expect(response.status).to.eql('ACTIVE');",
                                    "    ",
                                    "    const studentId = pm.collectionVariables.get('studentId');",
                                    "    const courseId = pm.collectionVariables.get('createdCourseId');",
                                    "    pm.expect(response.studentId.toString()).to.eql(studentId);",
                                    "    pm.expect(response.courseId.toString()).to.eql(courseId);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"studentId\": {{studentId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/{{createdCourseId}}/enroll",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "{{createdCourseId}}",
                                "enroll"
                            ]
                        }
                    }
                },
                {
                    "name": "4.2 Check Student Enrollment Status",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Check enrollment successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Student is enrolled', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.be.true;",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/{{createdCourseId}}/enrollment-status?studentId={{studentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "{{createdCourseId}}",
                                "enrollment-status"
                            ],
                            "query": [
                                {
                                    "key": "studentId",
                                    "value": "{{studentId}}"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "4.3 Get Course Enrollments",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get enrollments successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Enrollments list contains student', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.be.an('array');",
                                    "    pm.expect(response.length).to.be.at.least(1);",
                                    "    ",
                                    "    const studentId = pm.collectionVariables.get('studentId');",
                                    "    const hasStudent = response.some(enrollment => enrollment.studentId.toString() === studentId);",
                                    "    pm.expect(hasStudent).to.be.true;",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/{{createdCourseId}}/enrollments",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "{{createdCourseId}}",
                                "enrollments"
                            ]
                        }
                    }
                },
                {
                    "name": "4.4 Get Student's Courses",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Get student courses successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Student courses include enrolled course', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response).to.be.an('array');",
                                    "    pm.expect(response.length).to.be.at.least(1);",
                                    "    ",
                                    "    const courseId = pm.collectionVariables.get('createdCourseId');",
                                    "    const hasCourse = response.some(course => course.courseId.toString() === courseId);",
                                    "    pm.expect(hasCourse).to.be.true;",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/student/{{studentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "student",
                                "{{studentId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "4.5 Unenroll Student from Course",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Student unenrollment successful', function () {",
                                    "    pm.response.to.have.status(204);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/{{createdCourseId}}/enroll?studentId={{studentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "{{createdCourseId}}",
                                "enroll"
                            ],
                            "query": [
                                {
                                    "key": "studentId",
                                    "value": "{{studentId}}"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "5. Authorization and Error Handling",
            "item": [
                {
                    "name": "5.1 Create Course - Unauthorized (No Token)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Unauthorized access blocked', function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Unauthorized Course\",\n    \"description\": \"This should fail\",\n    \"durationWeeks\": 8,\n    \"maxStudents\": 20,\n    \"instructorId\": 1\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "5.2 Create Course - Student Role (Forbidden)",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header with student token",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Student cannot create course', function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Student Attempted Course\",\n    \"description\": \"Students cannot create courses\",\n    \"durationWeeks\": 8,\n    \"maxStudents\": 20,\n    \"instructorId\": 1\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "5.3 Get Non-Existent Course",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Non-existent course returns 404', function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/99999",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "99999"
                            ]
                        }
                    }
                },
                {
                    "name": "5.4 Enroll in Non-Existent Course",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header",
                                    "const studentToken = pm.collectionVariables.get('studentToken');",
                                    "if (studentToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + studentToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Enrollment in non-existent course fails', function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"studentId\": {{studentId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses/99999/enroll",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses",
                                "99999",
                                "enroll"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "6. Sample Data Creation",
            "item": [
                {
                    "name": "6.1 Create Course - Machine Learning",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header with instructor token",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('ML course creation successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    console.log('Machine Learning Course ID:', response.courseId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Machine Learning Fundamentals\",\n    \"description\": \"Introduction to machine learning algorithms, supervised and unsupervised learning, neural networks, and practical applications\",\n    \"durationWeeks\": 14,\n    \"maxStudents\": 15,\n    \"instructorId\": {{instructorId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "6.2 Create Course - Mobile App Development",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header with instructor token",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Mobile app course creation successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    console.log('Mobile App Development Course ID:', response.courseId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Mobile App Development with React Native\",\n    \"description\": \"Build cross-platform mobile applications using React Native, including navigation, state management, and deployment\",\n    \"durationWeeks\": 10,\n    \"maxStudents\": 18,\n    \"instructorId\": {{instructorId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "6.3 Create Course - Database Design",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Set Authorization header with instructor token",
                                    "const instructorToken = pm.collectionVariables.get('instructorToken');",
                                    "if (instructorToken) {",
                                    "    pm.request.headers.upsert({",
                                    "        key: 'Authorization',",
                                    "        value: 'Bearer ' + instructorToken",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Database course creation successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    console.log('Database Design Course ID:', response.courseId);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Database Design and SQL\",\n    \"description\": \"Master database design principles, normalization, SQL queries, stored procedures, and performance optimization\",\n    \"durationWeeks\": 8,\n    \"maxStudents\": 35,\n    \"instructorId\": {{instructorId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/courses",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ]
                        }
                    }
                },
                {
                    "name": "6.4 Summary - Sample Data Created",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "console.log('=== COURSE MANAGEMENT TESTS COMPLETED ===');",
                                    "console.log('✅ Authentication system working');",
                                    "console.log('✅ Course CRUD operations working');",
                                    "console.log('✅ Search and filtering working');",
                                    "console.log('✅ Enrollment system working');",
                                    "console.log('✅ Authorization and error handling working');",
                                    "console.log('');",
                                    "console.log('📊 SAMPLE DATA CREATED:');",
                                    "console.log('• Java Programming Fundamentals (12 weeks, 30 students)');",
                                    "console.log('• Python for Data Science (16 weeks, 25 students)');",
                                    "console.log('• Full-Stack Web Development (20 weeks, 20 students)');",
                                    "console.log('• Machine Learning Fundamentals (14 weeks, 15 students)');",
                                    "console.log('• Mobile App Development with React Native (10 weeks, 18 students)');",
                                    "console.log('• Database Design and SQL (8 weeks, 35 students)');",
                                    "console.log('');",
                                    "console.log('🎯 Ready for Module 3 implementation!');",
                                    "",
                                    "pm.test('Test collection completed successfully', function () {",
                                    "    pm.expect(true).to.be.true;",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/courses?paginated=false",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "courses"
                            ],
                            "query": [
                                {
                                    "key": "paginated",
                                    "value": "false"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global pre-request script",
                    "console.log('Running test:', pm.info.requestName);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script",
                    "console.log('Test completed:', pm.info.requestName, 'Status:', pm.response.code);"
                ]
            }
        }
    ]
}